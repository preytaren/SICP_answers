(load "deriv.scm")

(define (exponentiation? x)
 	(and (pair? x) (eq? (car x) '**)))

(define (make-exponentiation base ex)
 	(cond ((=number? ex 0) 1)
	      ((=number? ex 1) base)
	      ((and (number? base) (number? ex)) (exp base ex))
	      (else (list '** base ex))))

(define (base exp)
 	(if (eq? (car exp) '**)
	    (cadr exp)
	    (error "Not a exponentiation")))

(define (exponentiation exp)
        (caddr exp))	

(define (deriv exp var)
 	(cond ((number? exp) 0)
	      ((variable? exp)
	       (if (same-variable? exp var) 1 0))
	      ((sum? exp)
	       (make-sum (deriv (addend exp) var)
			 (deriv (augend exp) var)))
	      ((product? exp)
	       (make-sum (make-product (multiplier exp)
			  	       (deriv (multiplicand exp) var))
			 (make-product (deriv (multiplier exp) var)
					(multiplicand exp))))
	      ((exponentiation? exp)
	       (make-product (make-product (exponentiation exp)
		                           (make-exponentiation (base exp)
					    		        (make-sum (exponentiation exp) (- 1))))
		             (deriv (base exp) var)))
	       (else
		(error "unknown expression type -- DRIV" exp))))
